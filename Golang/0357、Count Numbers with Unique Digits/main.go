func countNumbersWithUniqueDigits(n int) int {
    //无解，看了大佬解法，
    //首先考虑 n=1时 res = 10
    //n = 2 时 res = 91，此时考虑这个91是怎么来的，将[0,100]拆分成两个区间，[0,9]和[10,100]他是由[10,100]时的结果数+(f(n-1)）得来的
    //那么怎么求[10,100]和区间的满足数呢，要三位各不相同，
    //逐位思考
    //第一位不能为0，有1-9   9种可能
    //第二位不能和第一位一样，但是可以使用0，因此也有9种可能
    //第三位不能喝前两位一样，因此是0-9 10个数字中选除开第一位和第二位的数字，有8种可能
    //因此只考虑三位数部分总和为 9*9 = 81
    //最后的总和还要加上f(n-1)= 10  所以最后的结果为 81 + 10 = 91

    //以此类推n=3时考虑第三位数字
    //第三位不能喝前两位一样，因此是0-9 10个数字中选除开第一位和第二位的数字，有8种可能
    //f(3) = 9*9*8 + f(2)

    if n < 0 {
        return 0
    }
    if n >10 { //到11只有最大长度已经有12位数字了，从最大长度到最大长度为12的这个区间的数字总有一位是重复的，因此结果是不变的，所以将n化成10即可
        n = 10 
    }
    
   dp := make([]int,11)
   dp[0] = 1
   for i := 1;i<=n;i++{
       tmp := i-1 //当前地推到n=几了
       z:=0
       tmpSum := 9
       for tmp > 0 {
           tmpSum *= (9-z)
           tmp--
           z++
       }
       dp[i] = dp[i-1]+tmpSum
   }

   return dp[n]

}
